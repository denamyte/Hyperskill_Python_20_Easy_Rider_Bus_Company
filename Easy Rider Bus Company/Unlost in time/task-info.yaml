type: edu
files:
- name: easyrider/easyrider.py
  visible: true
  text: '# Write your code here'
  learner_created: false
- name: test/__init__.py
  visible: false
  learner_created: false
- name: test/tests.py
  visible: false
  text: "from hstest.stage_test import *\nfrom hstest.test_case import TestCase\n\
    import re\n\n\nclass EasyRiderStage5(StageTest):\n    def generate(self) -> List[TestCase]:\n\
    \        return [\n            TestCase(\n                stdin='[{\"bus_id\"\
    \ : 512, \"stop_id\" : 4, \"stop_name\" : \"Bourbon Street\", \"next_stop\" :\
    \ 6, \"stop_type\" : \"S\", \"a_time\" : \"08:13\"}, '\n                     \
    \ '{\"bus_id\" : 512, \"stop_id\" : 6, \"stop_name\" : \"Sunset Boulevard\", \"\
    next_stop\" : 0, \"stop_type\" : \"F\", \"a_time\" : \"08:16\"}]',\n         \
    \       attach=\"OK\"),\n            TestCase(\n                stdin='[{\"bus_id\"\
    \ : 128, \"stop_id\" : 1, \"stop_name\" : \"Prospekt Avenue\", \"next_stop\" :\
    \ 3, \"stop_type\" : \"S\", \"a_time\" : \"08:12\"}, '\n                     \
    \ '{\"bus_id\" : 128, \"stop_id\" : 3, \"stop_name\" : \"Elm Street\", \"next_stop\"\
    \ : 5, \"stop_type\" : \"\", \"a_time\" : \"08:19\"}, '\n                    \
    \  '{\"bus_id\" : 128, \"stop_id\" : 5, \"stop_name\" : \"Fifth Avenue\", \"next_stop\"\
    \ : 7, \"stop_type\" : \"O\", \"a_time\" : \"08:17\"}, '\n                   \
    \   '{\"bus_id\" : 128, \"stop_id\" : 7, \"stop_name\" : \"Sesame Street\", \"\
    next_stop\" : 0, \"stop_type\" : \"F\", \"a_time\" : \"08:07\"}, '\n         \
    \             '{\"bus_id\" : 256, \"stop_id\" : 2, \"stop_name\" : \"Pilotow Street\"\
    , \"next_stop\" : 3, \"stop_type\" : \"S\", \"a_time\" : \"09:20\"}, '\n     \
    \                 '{\"bus_id\" : 256, \"stop_id\" : 3, \"stop_name\" : \"Elm Street\"\
    , \"next_stop\" : 6, \"stop_type\" : \"\", \"a_time\" : \"09:45\"}, '\n      \
    \                '{\"bus_id\" : 256, \"stop_id\" : 6, \"stop_name\" : \"Sunset\
    \ Boulevard\", \"next_stop\" : 7, \"stop_type\" : \"\", \"a_time\" : \"09:44\"\
    }, '\n                      '{\"bus_id\" : 256, \"stop_id\" : 7, \"stop_name\"\
    \ : \"Sesame Street\", \"next_stop\" : 0, \"stop_type\" : \"F\", \"a_time\" :\
    \ \"10:12\"}, '\n                      '{\"bus_id\" : 512, \"stop_id\" : 4, \"\
    stop_name\" : \"Bourbon Street\", \"next_stop\" : 6, \"stop_type\" : \"S\", \"\
    a_time\" : \"08:13\"}, '\n                      '{\"bus_id\" : 512, \"stop_id\"\
    \ : 6, \"stop_name\" : \"Sunset Boulevard\", \"next_stop\" : 0, \"stop_type\"\
    \ : \"F\", \"a_time\" : \"08:16\"}]',\n                attach=((('128', 'Fifth\
    \ Avenue'), ('256', 'Sunset Boulevard')), 3)),\n            TestCase(\n      \
    \          stdin='[{\"bus_id\" : 128, \"stop_id\" : 1, \"stop_name\" : \"Fifth\
    \ Avenue\", \"next_stop\" : 4, \"stop_type\" : \"S\", \"a_time\" : \"08:12\"},\
    \ '\n                      '{\"bus_id\" : 128, \"stop_id\" : 4, \"stop_name\"\
    \ : \"Abbey Road\", \"next_stop\" : 5, \"stop_type\" : \"\", \"a_time\" : \"08:19\"\
    },  '\n                      '{\"bus_id\" : 128, \"stop_id\" : 5, \"stop_name\"\
    \ : \"Santa Monica Boulevard\", \"next_stop\" : 8, \"stop_type\" : \"O\", \"a_time\"\
    \ : \"08:25\"},  '\n                      '{\"bus_id\" : 128, \"stop_id\" : 8,\
    \ \"stop_name\" : \"Elm Street\", \"next_stop\" : 11, \"stop_type\" : \"\", \"\
    a_time\" : \"08:37\"},  '\n                      '{\"bus_id\" : 128, \"stop_id\"\
    \ : 11, \"stop_name\" : \"Beale Street\", \"next_stop\" : 12, \"stop_type\" :\
    \ \"\", \"a_time\" : \"09:20\"},  '\n                      '{\"bus_id\" : 128,\
    \ \"stop_id\" : 12, \"stop_name\" : \"Sesame Street\", \"next_stop\" : 14, \"\
    stop_type\" : \"\", \"a_time\" : \"09:45\"},  '\n                      '{\"bus_id\"\
    \ : 128, \"stop_id\" : 14, \"stop_name\" : \"Bourbon Street\", \"next_stop\" :\
    \ 19, \"stop_type\" : \"O\", \"a_time\" : \"09:59\"},  '\n                   \
    \   '{\"bus_id\" : 128, \"stop_id\" : 19, \"stop_name\" : \"Prospekt Avenue\"\
    , \"next_stop\" : 0, \"stop_type\" : \"F\", \"a_time\" : \"10:12\"},  '\n    \
    \                  '{\"bus_id\" : 256, \"stop_id\" : 2, \"stop_name\" : \"Pilotow\
    \ Street\", \"next_stop\" : 3, \"stop_type\" : \"S\", \"a_time\" : \"08:13\"},\
    \  '\n                      '{\"bus_id\" : 256, \"stop_id\" : 3, \"stop_name\"\
    \ : \"Startowa Street\", \"next_stop\" : 8, \"stop_type\" : \"\", \"a_time\" :\
    \ \"08:16\"},  '\n                      '{\"bus_id\" : 256, \"stop_id\" : 8, \"\
    stop_name\" : \"Elm Street\", \"next_stop\" : 10, \"stop_type\" : \"\", \"a_time\"\
    \ : \"08:29\"},  '\n                      '{\"bus_id\" : 256, \"stop_id\" : 10,\
    \ \"stop_name\" : \"Lombard Street\", \"next_stop\" : 12, \"stop_type\" : \"\"\
    , \"a_time\" : \"08:44\"},  '\n                      '{\"bus_id\" : 256, \"stop_id\"\
    \ : 12, \"stop_name\" : \"Sesame Street\", \"next_stop\" : 13, \"stop_type\" :\
    \ \"O\", \"a_time\" : \"08:46\"},  '\n                      '{\"bus_id\" : 256,\
    \ \"stop_id\" : 13, \"stop_name\" : \"Orchard Road\", \"next_stop\" : 16, \"stop_type\"\
    \ : \"\", \"a_time\" : \"09:13\"},  '\n                      '{\"bus_id\" : 256,\
    \ \"stop_id\" : 16, \"stop_name\" : \"Sunset Boulevard\", \"next_stop\" : 17,\
    \ \"stop_type\" : \"O\", \"a_time\" : \"09:26\"},  '\n                      '{\"\
    bus_id\" : 256, \"stop_id\" : 17, \"stop_name\" : \"Khao San Road\", \"next_stop\"\
    \ : 20, \"stop_type\" : \"O\", \"a_time\" : \"10:25\"},  '\n                 \
    \     '{\"bus_id\" : 256, \"stop_id\" : 20, \"stop_name\" : \"Michigan Avenue\"\
    , \"next_stop\" : 0, \"stop_type\" : \"F\", \"a_time\" : \"11:26\"},  '\n    \
    \                  '{\"bus_id\" : 512, \"stop_id\" : 6, \"stop_name\" : \"Arlington\
    \ Road\", \"next_stop\" : 7, \"stop_type\" : \"S\", \"a_time\" : \"11:06\"}, \
    \ '\n                      '{\"bus_id\" : 512, \"stop_id\" : 7, \"stop_name\"\
    \ : \"Parizska Street\", \"next_stop\" : 8, \"stop_type\" : \"\", \"a_time\" :\
    \ \"11:15\"},  '\n                      '{\"bus_id\" : 512, \"stop_id\" : 8, \"\
    stop_name\" : \"Elm Street\", \"next_stop\" : 9, \"stop_type\" : \"\", \"a_time\"\
    \ : \"11:56\"},  '\n                      '{\"bus_id\" : 512, \"stop_id\" : 9,\
    \ \"stop_name\" : \"Niebajka Avenue\", \"next_stop\" : 15, \"stop_type\" : \"\"\
    , \"a_time\" : \"12:20\"},  '\n                      '{\"bus_id\" : 512, \"stop_id\"\
    \ : 15, \"stop_name\" : \"Jakis Street\", \"next_stop\" : 16, \"stop_type\" :\
    \ \"\", \"a_time\" : \"12:44\"},  '\n                      '{\"bus_id\" : 512,\
    \ \"stop_id\" : 16, \"stop_name\" : \"Sunset Boulevard\", \"next_stop\" : 18,\
    \ \"stop_type\" : \"\", \"a_time\" : \"13:01\"},  '\n                      '{\"\
    bus_id\" : 512, \"stop_id\" : 18, \"stop_name\" : \"Jakas Avenue\", \"next_stop\"\
    \ : 19, \"stop_type\" : \"\", \"a_time\" : \"14:00\"},  '\n                  \
    \    '{\"bus_id\" : 1024, \"stop_id\" : 21, \"stop_name\" : \"Karlikowska Avenue\"\
    , \"next_stop\" : 12, \"stop_type\" : \"S\", \"a_time\" : \"13:01\"},  '\n   \
    \                   '{\"bus_id\" : 1024, \"stop_id\" : 12, \"stop_name\" : \"\
    Sesame Street\", \"next_stop\" : 0, \"stop_type\" : \"F\", \"a_time\" : \"14:00\"\
    },  '\n                      '{\"bus_id\" : 512, \"stop_id\" : 19, \"stop_name\"\
    \ : \"Prospekt Avenue\", \"next_stop\" : 0, \"stop_type\" : \"F\", \"a_time\"\
    \ : \"14:11\"}]',\n                attach=\"OK\"),\n            TestCase(\n  \
    \              stdin='[{\"bus_id\" : 128, \"stop_id\" : 1, \"stop_name\" : \"\
    Fifth Avenue\", \"next_stop\" : 4, \"stop_type\" : \"S\", \"a_time\" : \"08:12\"\
    }, '\n                      '{\"bus_id\" : 128, \"stop_id\" : 4, \"stop_name\"\
    \ : \"Abbey Road\", \"next_stop\" : 5, \"stop_type\" : \"\", \"a_time\" : \"08:19\"\
    },  '\n                      '{\"bus_id\" : 128, \"stop_id\" : 5, \"stop_name\"\
    \ : \"Santa Monica Boulevard\", \"next_stop\" : 8, \"stop_type\" : \"O\", \"a_time\"\
    \ : \"08:25\"},  '\n                      '{\"bus_id\" : 128, \"stop_id\" : 8,\
    \ \"stop_name\" : \"Elm Street\", \"next_stop\" : 11, \"stop_type\" : \"\", \"\
    a_time\" : \"08:37\"},  '\n                      '{\"bus_id\" : 128, \"stop_id\"\
    \ : 11, \"stop_name\" : \"Beale Street\", \"next_stop\" : 12, \"stop_type\" :\
    \ \"\", \"a_time\" : \"09:20\"},  '\n                      '{\"bus_id\" : 128,\
    \ \"stop_id\" : 12, \"stop_name\" : \"Sesame Street\", \"next_stop\" : 14, \"\
    stop_type\" : \"\", \"a_time\" : \"09:45\"},  '\n                      '{\"bus_id\"\
    \ : 128, \"stop_id\" : 14, \"stop_name\" : \"Bourbon Street\", \"next_stop\" :\
    \ 19, \"stop_type\" : \"O\", \"a_time\" : \"09:59\"},  '\n                   \
    \   '{\"bus_id\" : 128, \"stop_id\" : 19, \"stop_name\" : \"Prospekt Avenue\"\
    , \"next_stop\" : 0, \"stop_type\" : \"F\", \"a_time\" : \"10:12\"},  '\n    \
    \                  '{\"bus_id\" : 256, \"stop_id\" : 2, \"stop_name\" : \"Pilotow\
    \ Street\", \"next_stop\" : 3, \"stop_type\" : \"S\", \"a_time\" : \"08:13\"},\
    \  '\n                      '{\"bus_id\" : 256, \"stop_id\" : 3, \"stop_name\"\
    \ : \"Startowa Street\", \"next_stop\" : 8, \"stop_type\" : \"\", \"a_time\" :\
    \ \"08:16\"},  '\n                      '{\"bus_id\" : 256, \"stop_id\" : 8, \"\
    stop_name\" : \"Elm Street\", \"next_stop\" : 10, \"stop_type\" : \"\", \"a_time\"\
    \ : \"08:29\"},  '\n                      '{\"bus_id\" : 256, \"stop_id\" : 10,\
    \ \"stop_name\" : \"Lombard Street\", \"next_stop\" : 12, \"stop_type\" : \"\"\
    , \"a_time\" : \"08:28\"},  '\n                      '{\"bus_id\" : 256, \"stop_id\"\
    \ : 12, \"stop_name\" : \"Sesame Street\", \"next_stop\" : 13, \"stop_type\" :\
    \ \"O\", \"a_time\" : \"08:27\"},  '\n                      '{\"bus_id\" : 256,\
    \ \"stop_id\" : 13, \"stop_name\" : \"Orchard Road\", \"next_stop\" : 16, \"stop_type\"\
    \ : \"\", \"a_time\" : \"08:42\"},  '\n                      '{\"bus_id\" : 256,\
    \ \"stop_id\" : 16, \"stop_name\" : \"Sunset Boulevard\", \"next_stop\" : 17,\
    \ \"stop_type\" : \"O\", \"a_time\" : \"09:26\"},  '\n                      '{\"\
    bus_id\" : 256, \"stop_id\" : 17, \"stop_name\" : \"Khao San Road\", \"next_stop\"\
    \ : 20, \"stop_type\" : \"O\", \"a_time\" : \"10:25\"},  '\n                 \
    \     '{\"bus_id\" : 256, \"stop_id\" : 20, \"stop_name\" : \"Michigan Avenue\"\
    , \"next_stop\" : 0, \"stop_type\" : \"F\", \"a_time\" : \"11:26\"},  '\n    \
    \                  '{\"bus_id\" : 512, \"stop_id\" : 6, \"stop_name\" : \"Arlington\
    \ Road\", \"next_stop\" : 7, \"stop_type\" : \"S\", \"a_time\" : \"11:06\"}, \
    \ '\n                      '{\"bus_id\" : 512, \"stop_id\" : 7, \"stop_name\"\
    \ : \"Parizska Street\", \"next_stop\" : 8, \"stop_type\" : \"\", \"a_time\" :\
    \ \"11:15\"},  '\n                      '{\"bus_id\" : 512, \"stop_id\" : 8, \"\
    stop_name\" : \"Elm Street\", \"next_stop\" : 9, \"stop_type\" : \"\", \"a_time\"\
    \ : \"11:06\"},  '\n                      '{\"bus_id\" : 512, \"stop_id\" : 9,\
    \ \"stop_name\" : \"Niebajka Avenue\", \"next_stop\" : 15, \"stop_type\" : \"\"\
    , \"a_time\" : \"12:20\"},  '\n                      '{\"bus_id\" : 512, \"stop_id\"\
    \ : 15, \"stop_name\" : \"Jakis Street\", \"next_stop\" : 16, \"stop_type\" :\
    \ \"\", \"a_time\" : \"12:44\"},  '\n                      '{\"bus_id\" : 512,\
    \ \"stop_id\" : 16, \"stop_name\" : \"Sunset Boulevard\", \"next_stop\" : 18,\
    \ \"stop_type\" : \"\", \"a_time\" : \"13:01\"},  '\n                      '{\"\
    bus_id\" : 512, \"stop_id\" : 18, \"stop_name\" : \"Jakas Avenue\", \"next_stop\"\
    \ : 19, \"stop_type\" : \"\", \"a_time\" : \"14:00\"},  '\n                  \
    \    '{\"bus_id\" : 1024, \"stop_id\" : 21, \"stop_name\" : \"Karlikowska Avenue\"\
    , \"next_stop\" : 12, \"stop_type\" : \"S\", \"a_time\" : \"13:01\"},  '\n   \
    \                   '{\"bus_id\" : 1024, \"stop_id\" : 12, \"stop_name\" : \"\
    Sesame Street\", \"next_stop\" : 0, \"stop_type\" : \"F\", \"a_time\" : \"13:00\"\
    },  '\n                      '{\"bus_id\" : 512, \"stop_id\" : 19, \"stop_name\"\
    \ : \"Prospekt Avenue\", \"next_stop\" : 0, \"stop_type\" : \"F\", \"a_time\"\
    \ : \"14:11\"}]',\n                attach=((('256', 'Lombard Street'), ('512',\
    \ 'Elm Street'), ('1024', 'Sesame Street')), 4)),\n        ]\n\n    def check(self,\
    \ reply: str, result) -> CheckResult:\n        if isinstance(result, str):\n \
    \           if result not in reply:\n                return CheckResult.wrong(f\"\
    Wrong number of bugs detected or wrong output format.\"\n                    \
    \                     f\"Expected output: '{result}'.\")\n        else:\n    \
    \        output_len = len(reply.strip().split('\\n'))\n            if output_len\
    \ != result[1]:\n                if len(result[0]) == 2:\n                   \
    \ return CheckResult.wrong(f\"Wrong number of text lines in output. Found {output_len},\
    \ \"\n                                             f\"expected {result[1]}.\\\
    n\" \n                                             \"Expected output:\\n\\n\"\n\
    \                                             \"Arrival time test:\\n\"\n    \
    \                                         f\"bus_id line {result[0][0][0]}: wrong\
    \ time on station {result[0][0][1]}\\n\"\n                                   \
    \          f\"bus_id line {result[0][1][0]}: wrong time on station {result[0][1][1]}\"\
    )\n                else:\n                    return CheckResult.wrong(f\"Wrong\
    \ number of text lines in output. Found {output_len}, \"\n                   \
    \                          f\"expected {result[1]}.\\n\" \n                  \
    \                           \"Expected output:\\n\\n\"\n                     \
    \                        \"Arrival time test:\\n\"\n                         \
    \                    f\"bus_id line {result[0][0][0]}: wrong time on station {result[0][0][1]}\\\
    n\"\n                                             f\"bus_id line {result[0][1][0]}:\
    \ wrong time on station {result[0][1][1]}\\n\"\n                             \
    \                f\"bus_id line {result[0][2][0]}: wrong time on station {result[0][2][1]}\"\
    )\n\n            for x in range(len(result[0])):\n                query = result[0][x][0]\
    \ + \"[\\\\D]*\" + result[0][x][1] + \"\\n\"\n                response = re.search(rf'{query}',\
    \ reply)\n                if not response or sum(\n                        response.group(0).count(txt)\
    \ for txt in (\"Avenue\", \"Street\", \"Boulevard\", \"Road\")) != 1:\n      \
    \              return CheckResult.wrong(\"Wrong number of bugs detected or the\
    \ output format is wrong in bus line \"\n                                    \
    \         f\"{result[0][x][0]}. Expected output:\\n\\n\" \n                  \
    \                           f\"bus_id line {result[0][x][0]}: wrong time on station\
    \ {result[0][x][1]}\")\n        return CheckResult.correct()\n\n\nif __name__\
    \ == '__main__':\n    EasyRiderStage5('easyrider.easyrider').run_tests()\n"
  learner_created: false
- name: tests.py
  visible: false
  text: |
    from test.tests import EasyRiderStage5

    if __name__ == '__main__':
        EasyRiderStage5('easyrider.easyrider').run_tests()
  learner_created: false
- name: easyrider/validation.py
  visible: true
  text: "import json\nfrom collections import defaultdict\nfrom dataclasses import\
    \ dataclass\nfrom typing import Dict, Any, Callable, List\n\nPREDICATE = Callable[[Any],\
    \ bool]\n\n# STOP_NAME_REGEXP = re.compile('^[A-Z].* (Road|Street|Boulevard|Avenue)$')\n\
    # STOP_TYPE_REGEXP = re.compile('^[SOF]?$')\n# TIME_REGEXP = re.compile('^([01][0-9]|2[0-3]):([0-5][0-9])$')\n\
    \n# is_str: PREDICATE = lambda v: type(v).__name__ == 'str'\n# is_int: PREDICATE\
    \ = lambda v: type(v).__name__ == 'int'\n\n# is_not_empty_str: PREDICATE = lambda\
    \ v: is_str(v) and v\n# is_stop_name: PREDICATE = lambda v: is_str(v) and STOP_NAME_REGEXP.match(v)\n\
    # is_stop_type: PREDICATE = lambda v: is_str(v) and STOP_TYPE_REGEXP.match(v)\n\
    # is_time: PREDICATE = lambda v: is_str(v) and TIME_REGEXP.match(v)\n\n\n@dataclass\n\
    class MetaInfo:\n    test: PREDICATE\n\n\n@dataclass\nclass StartFinish:\n   \
    \ start = False\n    finish = False\n\n\nFIELDS_META: Dict[str, MetaInfo] = {\n\
    \    # 'bus_id': MetaInfo(is_int),\n    # 'stop_id': MetaInfo(is_int),\n    #\
    \ 'stop_name': MetaInfo(is_stop_name),\n    # 'next_stop': MetaInfo(is_int),\n\
    \    # 'stop_type': MetaInfo(is_stop_type),\n    # 'a_time': MetaInfo(is_time)\n\
    }\n\n\nclass Validation:\n    NO_START_OR_END = 'There is no start or end stop\
    \ for the line: {0}.'\n\n    def __init__(self, json_str: str):\n        self._json\
    \ = json.loads(json_str)\n        # self._errors: Dict[str, int] = {k: 0 for k\
    \ in FIELDS_META.keys()}\n        # self._bus_lines_counts: Dict[int, int] = defaultdict(lambda:\
    \ 0)\n        self._stop_error_bus_id = 0\n        self._start_names: List[str]\
    \ = []\n        self._transfer_names: List[str] = []\n        self._finish_names:\
    \ List[str] = []\n        self._check_fields()\n\n    def _is_lines_points_error(self)\
    \ -> int:\n        stop_counter: Dict[int, StartFinish] = defaultdict(lambda:\
    \ StartFinish())\n        for r in self._json:\n            bus_id = r.get('bus_id')\n\
    \            stop_type = r.get('stop_type')\n            match stop_type:\n  \
    \              case 'S':\n                    if stop_counter[bus_id].start:\n\
    \                        return bus_id\n                    stop_counter[bus_id].start\
    \ = True\n                case 'F':\n                    if stop_counter[bus_id].finish:\n\
    \                        return bus_id\n                    stop_counter[bus_id].finish\
    \ = True\n        for bus_id, sf in stop_counter.items():\n            if sf.start\
    \ + sf.finish < 2:\n                return bus_id\n        return 0\n\n    def\
    \ _collect_stop_names(self):\n        start_set = set()\n        finish_set =\
    \ set()\n        transfer_dict = defaultdict(lambda: 0)\n        for r in self._json:\n\
    \            stop_name = r.get('stop_name')\n            stop_type = r.get('stop_type')\n\
    \            match stop_type:\n                case 'S': start_set.add(stop_name)\n\
    \                case 'F': finish_set.add(stop_name)\n            transfer_dict[stop_name]\
    \ += 1\n\n        self._start_names = sorted(start_set)\n        self._finish_names\
    \ = sorted(finish_set)\n        self._transfer_names = sorted(k for k, v in transfer_dict.items()\n\
    \                                      if v > 1)\n\n    def _check_fields(self):\n\
    \        self._stop_error_bus_id = self._is_lines_points_error()\n        if self._stop_error_bus_id:\n\
    \            return\n        self._collect_stop_names()\n        # for r in self._json:\n\
    \        #     pass\n        # self._bus_lines_counts[r.get('bus_id')] += 1\n\
    \        # for name, meta in FIELDS_META.items():\n        #    self._errors[name]\
    \ += not meta.test(r.get(name))\n\n    def __str__(self):\n        if self._stop_error_bus_id:\n\
    \            result = Validation.NO_START_OR_END.format(self._stop_error_bus_id)\n\
    \        else:\n            result = f'''\\\nStart stops: {len(self._start_names)}\
    \ {self._start_names}\nTransfer stops: {len(self._transfer_names)} {self._transfer_names}\n\
    Finish stops: {len(self._finish_names)} {self._finish_names}'''\n        return\
    \ result\n        \n        # return 'Line names and number of stops:\\n' + \\\
    \n        #        '\\n'.join(f'bus_id: {k}, stops: {v}' for k, v\n        # \
    \                 in self._bus_lines_counts.items())\n\n        # total = sum(self._errors.values())\n\
    \        # return f'Type and required field validation: {total} errors\\n' + \\\
    \n        #        '\\n'.join(f'{k}: {v}' for k, v, in self._errors.items())\n"
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/10892#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Mon, 16 Jan 2023 13:48:09 UTC"
record: 5
