type: edu
files:
- name: easyrider/easyrider.py
  visible: true
  text: '# Write your code here'
  learner_created: false
- name: test/__init__.py
  visible: false
  learner_created: false
- name: test/tests.py
  visible: false
  text: "from hstest.stage_test import *\nfrom hstest.test_case import TestCase\n\
    import re\n\n\nclass EasyRiderStage6(StageTest):\n    def generate(self) -> List[TestCase]:\n\
    \        return [\n\n            TestCase(stdin='[{\"bus_id\" : 128, \"stop_id\"\
    \ : 1, \"stop_name\" : \"Prospekt Avenue\", \"next_stop\" : 3, \"stop_type\" :\
    \ \"S\", \"a_time\" : \"08:12\"}, '\n                           '{\"bus_id\" :\
    \ 128, \"stop_id\" : 3, \"stop_name\" : \"Elm Street\", \"next_stop\" : 5, \"\
    stop_type\" : \"O\", \"a_time\" : \"08:19\"}, '\n                           '{\"\
    bus_id\" : 128, \"stop_id\" : 5, \"stop_name\" : \"Fifth Avenue\", \"next_stop\"\
    \ : 7, \"stop_type\" : \"O\", \"a_time\" : \"08:25\"}, '\n                   \
    \        '{\"bus_id\" : 128, \"stop_id\" : 7, \"stop_name\" : \"Sesame Street\"\
    , \"next_stop\" : 0, \"stop_type\" : \"F\", \"a_time\" : \"08:37\"}, '\n     \
    \                      '{\"bus_id\" : 256, \"stop_id\" : 2, \"stop_name\" : \"\
    Pilotow Street\", \"next_stop\" : 3, \"stop_type\" : \"S\", \"a_time\" : \"09:20\"\
    }, '\n                           '{\"bus_id\" : 256, \"stop_id\" : 3, \"stop_name\"\
    \ : \"Elm Street\", \"next_stop\" : 6, \"stop_type\" : \"\", \"a_time\" : \"09:45\"\
    }, '\n                           '{\"bus_id\" : 256, \"stop_id\" : 6, \"stop_name\"\
    \ : \"Abbey Road\", \"next_stop\" : 7, \"stop_type\" : \"O\", \"a_time\" : \"\
    09:59\"}, '\n                           '{\"bus_id\" : 256, \"stop_id\" : 7, \"\
    stop_name\" : \"Sesame Street\", \"next_stop\" : 0, \"stop_type\" : \"F\", \"\
    a_time\" : \"10:12\"}, '\n                           '{\"bus_id\" : 512, \"stop_id\"\
    \ : 4, \"stop_name\" : \"Bourbon Street\", \"next_stop\" : 6, \"stop_type\" :\
    \ \"S\", \"a_time\" : \"08:13\"}, '\n                           '{\"bus_id\" :\
    \ 512, \"stop_id\" : 6, \"stop_name\" : \"Abbey Road\", \"next_stop\" : 0, \"\
    stop_type\" : \"F\", \"a_time\" : \"08:16\"}]',\n                     attach=('Abbey\
    \ Road', 'Elm Street')),\n            TestCase(stdin='[{\"bus_id\" : 128, \"stop_id\"\
    \ : 1, \"stop_name\" : \"Fifth Avenue\", \"next_stop\" : 4, \"stop_type\" : \"\
    S\", \"a_time\" : \"08:12\"}, '\n                           '{\"bus_id\" : 128,\
    \ \"stop_id\" : 4, \"stop_name\" : \"Abbey Road\", \"next_stop\" : 5, \"stop_type\"\
    \ : \"\", \"a_time\" : \"08:19\"},  '\n                           '{\"bus_id\"\
    \ : 128, \"stop_id\" : 5, \"stop_name\" : \"Santa Monica Boulevard\", \"next_stop\"\
    \ : 8, \"stop_type\" : \"O\", \"a_time\" : \"08:25\"},  '\n                  \
    \         '{\"bus_id\" : 128, \"stop_id\" : 8, \"stop_name\" : \"Elm Street\"\
    , \"next_stop\" : 11, \"stop_type\" : \"\", \"a_time\" : \"08:37\"},  '\n    \
    \                       '{\"bus_id\" : 128, \"stop_id\" : 11, \"stop_name\" :\
    \ \"Beale Street\", \"next_stop\" : 12, \"stop_type\" : \"\", \"a_time\" : \"\
    09:20\"},  '\n                           '{\"bus_id\" : 128, \"stop_id\" : 12,\
    \ \"stop_name\" : \"Sesame Street\", \"next_stop\" : 14, \"stop_type\" : \"\"\
    , \"a_time\" : \"09:45\"},  '\n                           '{\"bus_id\" : 128,\
    \ \"stop_id\" : 14, \"stop_name\" : \"Bourbon Street\", \"next_stop\" : 19, \"\
    stop_type\" : \"O\", \"a_time\" : \"09:59\"},  '\n                           '{\"\
    bus_id\" : 128, \"stop_id\" : 19, \"stop_name\" : \"Prospekt Avenue\", \"next_stop\"\
    \ : 0, \"stop_type\" : \"F\", \"a_time\" : \"10:12\"},  '\n                  \
    \         '{\"bus_id\" : 256, \"stop_id\" : 2, \"stop_name\" : \"Pilotow Street\"\
    , \"next_stop\" : 3, \"stop_type\" : \"S\", \"a_time\" : \"08:13\"},  '\n    \
    \                       '{\"bus_id\" : 256, \"stop_id\" : 3, \"stop_name\" : \"\
    Startowa Street\", \"next_stop\" : 8, \"stop_type\" : \"\", \"a_time\" : \"08:16\"\
    },  '\n                           '{\"bus_id\" : 256, \"stop_id\" : 8, \"stop_name\"\
    \ : \"Elm Street\", \"next_stop\" : 10, \"stop_type\" : \"\", \"a_time\" : \"\
    08:29\"},  '\n                           '{\"bus_id\" : 256, \"stop_id\" : 10,\
    \ \"stop_name\" : \"Lombard Street\", \"next_stop\" : 12, \"stop_type\" : \"\"\
    , \"a_time\" : \"08:44\"},  '\n                           '{\"bus_id\" : 256,\
    \ \"stop_id\" : 12, \"stop_name\" : \"Sesame Street\", \"next_stop\" : 13, \"\
    stop_type\" : \"O\", \"a_time\" : \"08:46\"},  '\n                           '{\"\
    bus_id\" : 256, \"stop_id\" : 13, \"stop_name\" : \"Orchard Road\", \"next_stop\"\
    \ : 16, \"stop_type\" : \"\", \"a_time\" : \"09:13\"},  '\n                  \
    \         '{\"bus_id\" : 256, \"stop_id\" : 16, \"stop_name\" : \"Sunset Boulevard\"\
    , \"next_stop\" : 17, \"stop_type\" : \"O\", \"a_time\" : \"09:26\"},  '\n   \
    \                        '{\"bus_id\" : 256, \"stop_id\" : 17, \"stop_name\" :\
    \ \"Khao San Road\", \"next_stop\" : 20, \"stop_type\" : \"O\", \"a_time\" : \"\
    10:25\"},  '\n                           '{\"bus_id\" : 256, \"stop_id\" : 20,\
    \ \"stop_name\" : \"Michigan Avenue\", \"next_stop\" : 0, \"stop_type\" : \"F\"\
    , \"a_time\" : \"11:26\"},  '\n                           '{\"bus_id\" : 512,\
    \ \"stop_id\" : 6, \"stop_name\" : \"Arlington Road\", \"next_stop\" : 7, \"stop_type\"\
    \ : \"S\", \"a_time\" : \"11:06\"},  '\n                           '{\"bus_id\"\
    \ : 512, \"stop_id\" : 7, \"stop_name\" : \"Parizska Street\", \"next_stop\" :\
    \ 8, \"stop_type\" : \"\", \"a_time\" : \"11:15\"},  '\n                     \
    \      '{\"bus_id\" : 512, \"stop_id\" : 8, \"stop_name\" : \"Elm Street\", \"\
    next_stop\" : 9, \"stop_type\" : \"\", \"a_time\" : \"11:56\"},  '\n         \
    \                  '{\"bus_id\" : 512, \"stop_id\" : 9, \"stop_name\" : \"Niebajka\
    \ Avenue\", \"next_stop\" : 15, \"stop_type\" : \"\", \"a_time\" : \"12:20\"},\
    \  '\n                           '{\"bus_id\" : 512, \"stop_id\" : 15, \"stop_name\"\
    \ : \"Jakis Street\", \"next_stop\" : 16, \"stop_type\" : \"\", \"a_time\" : \"\
    12:44\"},  '\n                           '{\"bus_id\" : 512, \"stop_id\" : 16,\
    \ \"stop_name\" : \"Sunset Boulevard\", \"next_stop\" : 18, \"stop_type\" : \"\
    \", \"a_time\" : \"13:01\"},  '\n                           '{\"bus_id\" : 512,\
    \ \"stop_id\" : 18, \"stop_name\" : \"Jakas Avenue\", \"next_stop\" : 19, \"stop_type\"\
    \ : \"\", \"a_time\" : \"14:00\"},  '\n                           '{\"bus_id\"\
    \ : 1024, \"stop_id\" : 21, \"stop_name\" : \"Karlikowska Avenue\", \"next_stop\"\
    \ : 12, \"stop_type\" : \"S\", \"a_time\" : \"13:01\"},  '\n                 \
    \          '{\"bus_id\" : 1024, \"stop_id\" : 12, \"stop_name\" : \"Sesame Street\"\
    , \"next_stop\" : 0, \"stop_type\" : \"F\", \"a_time\" : \"14:00\"},  '\n    \
    \                       '{\"bus_id\" : 512, \"stop_id\" : 19, \"stop_name\" :\
    \ \"Prospekt Avenue\", \"next_stop\" : 0, \"stop_type\" : \"F\", \"a_time\" :\
    \ \"14:11\"}]',\n                     attach=('Sesame Street', 'Sunset Boulevard')),\n\
    \            TestCase(stdin='[{\"bus_id\" : 128, \"stop_id\" : 1, \"stop_name\"\
    \ : \"Prospekt Avenue\", \"next_stop\" : 3, \"stop_type\" : \"S\", \"a_time\"\
    \ : \"08:12\"}, '\n                           '{\"bus_id\" : 128, \"stop_id\"\
    \ : 3, \"stop_name\" : \"Elm Street\", \"next_stop\" : 5, \"stop_type\" : \"\"\
    , \"a_time\" : \"08:19\"}, '\n                           '{\"bus_id\" : 128, \"\
    stop_id\" : 5, \"stop_name\" : \"Fifth Avenue\", \"next_stop\" : 7, \"stop_type\"\
    \ : \"O\", \"a_time\" : \"08:25\"}, '\n                           '{\"bus_id\"\
    \ : 128, \"stop_id\" : 7, \"stop_name\" : \"Sesame Street\", \"next_stop\" : 0,\
    \ \"stop_type\" : \"F\", \"a_time\" : \"08:37\"}, '\n                        \
    \   '{\"bus_id\" : 256, \"stop_id\" : 2, \"stop_name\" : \"Pilotow Street\", \"\
    next_stop\" : 3, \"stop_type\" : \"S\", \"a_time\" : \"09:20\"}, '\n         \
    \                  '{\"bus_id\" : 256, \"stop_id\" : 3, \"stop_name\" : \"Elm\
    \ Street\", \"next_stop\" : 6, \"stop_type\" : \"\", \"a_time\" : \"09:45\"},\
    \ '\n                           '{\"bus_id\" : 256, \"stop_id\" : 6, \"stop_name\"\
    \ : \"Sunset Boulevard\", \"next_stop\" : 7, \"stop_type\" : \"\", \"a_time\"\
    \ : \"09:59\"}, '\n                           '{\"bus_id\" : 256, \"stop_id\"\
    \ : 7, \"stop_name\" : \"Sesame Street\", \"next_stop\" : 0, \"stop_type\" : \"\
    F\", \"a_time\" : \"10:12\"}, '\n                           '{\"bus_id\" : 512,\
    \ \"stop_id\" : 4, \"stop_name\" : \"Bourbon Street\", \"next_stop\" : 6, \"stop_type\"\
    \ : \"S\", \"a_time\" : \"08:13\"}, '\n                           '{\"bus_id\"\
    \ : 512, \"stop_id\" : 6, \"stop_name\" : \"Sunset Boulevard\", \"next_stop\"\
    \ : 0, \"stop_type\" : \"F\", \"a_time\" : \"08:16\"}]',\n                   \
    \  attach=\"OK\"),\n        ]\n\n    def check(self, reply: str, result) -> CheckResult:\n\
    \        if isinstance(result, str):\n            if result not in reply:\n  \
    \              return CheckResult.wrong(f\"Wrong number of bugs detected or the\
    \ output format is wrong. \"\n                                         \"Expected\
    \ output:\\n\\n\"\n                                         \"On demand stops\
    \ test:\\n\"\n                                         f\"Wrong stop type: {result}\"\
    )\n        else:\n            query = rf\"['{result[0]}[\\W]+{result[1]}']\"\n\
    \            if not re.search(rf'{query}', reply):\n                return CheckResult.wrong(f\"\
    Wrong number of bugs detected or the output format is wrong. \"\n            \
    \                             \"Expected output:\\n\\n\" \n                  \
    \                       \"On demand stops test:\\n\"\n                       \
    \                  f\"Wrong stop type: {list(result)}\")\n        return CheckResult.correct()\n\
    \n\nif __name__ == '__main__':\n    EasyRiderStage6('easyrider.easyrider').run_tests()\n"
  learner_created: false
- name: tests.py
  visible: false
  text: |
    from test.tests import EasyRiderStage6

    if __name__ == '__main__':
        EasyRiderStage6('easyrider.easyrider').run_tests()
  learner_created: false
- name: easyrider/validation.py
  visible: true
  text: |
    import json
    from collections import defaultdict
    from dataclasses import dataclass
    from datetime import time
    from typing import Dict, Any, Callable, List

    PREDICATE = Callable[[Any], bool]


    # STOP_NAME_REGEXP = re.compile('^[A-Z].* (Road|Street|Boulevard|Avenue)$')
    # STOP_TYPE_REGEXP = re.compile('^[SOF]?$')
    # TIME_REGEXP = re.compile('^([01][0-9]|2[0-3]):([0-5][0-9])$')

    # is_str: PREDICATE = lambda v: type(v).__name__ == 'str'
    # is_int: PREDICATE = lambda v: type(v).__name__ == 'int'

    # is_not_empty_str: PREDICATE = lambda v: is_str(v) and v
    # is_stop_name: PREDICATE = lambda v: is_str(v) and STOP_NAME_REGEXP.match(v)
    # is_stop_type: PREDICATE = lambda v: is_str(v) and STOP_TYPE_REGEXP.match(v)
    # is_time: PREDICATE = lambda v: is_str(v) and TIME_REGEXP.match(v)


    @dataclass
    class MetaInfo:
        test: PREDICATE


    @dataclass
    class StartFinish:
        start = False
        finish = False


    FIELDS_META: Dict[str, MetaInfo] = {
        # 'bus_id': MetaInfo(is_int),
        # 'stop_id': MetaInfo(is_int),
        # 'stop_name': MetaInfo(is_stop_name),
        # 'next_stop': MetaInfo(is_int),
        # 'stop_type': MetaInfo(is_stop_type),
        # 'a_time': MetaInfo(is_time)
    }


    class Validation:
        NO_START_OR_END = 'There is no start or end stop for the line: {0}.'

        def __init__(self, json_str: str):
            self._json = json.loads(json_str)
            # self._errors: Dict[str, int] = {k: 0 for k in FIELDS_META.keys()}
            # self._bus_lines_counts: Dict[int, int] = defaultdict(lambda: 0)
            # self._stop_error_bus_id = 0
            # self._start_names: List[str] = []
            # self._transfer_names: List[str] = []
            # self._finish_names: List[str] = []
            # self._time_check_dict: Dict[int, time] = defaultdict(lambda: time())
            # self._time_travel_facts: Dict[int, str] = {}
            self._check_fields()

        def _on_demand_test(self):
            start_finish_names: List[str] = []
            other_type_dict = defaultdict(lambda: 0)
            for r in self._json:
                stop_name = r.get('stop_name')
                stop_type = r.get('stop_type')

                other_type_dict[stop_name] += 1
                if stop_type == 'O':

        #         match stop_type:
        #             case 'S':
        #                 start_set.add(stop_name)
        #             case 'F':
        #                 finish_set.add(stop_name)
        #         transfer_dict[stop_name] += 1
        #
        #     self._transfer_names = sorted(k for k, v in transfer_dict.items()
        #                                   if v > 1)

        # def _time_travel_check(self):
        #     for r in self._json:
        #         bus_id = r.get('bus_id')
        #         t = time(*(int(s) for s in r.get('a_time').split(':')))
        #         if bus_id not in self._time_travel_facts \
        #                 and t <= self._time_check_dict[bus_id]:
        #             self._time_travel_facts[bus_id] = r.get('stop_name')
        #         else:
        #             self._time_check_dict[bus_id] = t

        # def _is_lines_points_error(self) -> int:
        #     stop_counter: Dict[int, StartFinish] = defaultdict(lambda: StartFinish())
        #     for r in self._json:
        #         bus_id = r.get('bus_id')
        #         stop_type = r.get('stop_type')
        #         match stop_type:
        #             case 'S':
        #                 if stop_counter[bus_id].start:
        #                     return bus_id
        #                 stop_counter[bus_id].start = True
        #             case 'F':
        #                 if stop_counter[bus_id].finish:
        #                     return bus_id
        #                 stop_counter[bus_id].finish = True
        #     for bus_id, sf in stop_counter.items():
        #         if sf.start + sf.finish < 2:
        #             return bus_id
        #     return 0

        # def _collect_stop_names(self):
        #     start_set = set()
        #     finish_set = set()
        #     transfer_dict = defaultdict(lambda: 0)
        #     for r in self._json:
        #         stop_name = r.get('stop_name')
        #         stop_type = r.get('stop_type')
        #         match stop_type:
        #             case 'S':
        #                 start_set.add(stop_name)
        #             case 'F':
        #                 finish_set.add(stop_name)
        #         transfer_dict[stop_name] += 1
        #
        #     self._start_names = sorted(start_set)
        #     self._finish_names = sorted(finish_set)
        #     self._transfer_names = sorted(k for k, v in transfer_dict.items()
        #                                   if v > 1)

        def _check_fields(self):
            self._on_demand_test()

            # self._time_travel_check()

            # self._stop_error_bus_id = self._is_lines_points_error()
            # if self._stop_error_bus_id:
            #     return
            # self._collect_stop_names()

            # for r in self._json:
            #     pass
            # self._bus_lines_counts[r.get('bus_id')] += 1
            # for name, meta in FIELDS_META.items():
            #    self._errors[name] += not meta.test(r.get(name))

        def __str__(self):
            # result = 'Arrival time test:\n'
            # if len(self._time_travel_facts):
            #     result += '\n'.join(f'bus_id line {k}: wrong time on station {v}'
            #                         for k, v in self._time_travel_facts.items())
            # else:
            #     result += 'OK'
            # return result

    #         if self._stop_error_bus_id:
    #             result = Validation.NO_START_OR_END.format(self._stop_error_bus_id)
    #         else:
    #             result = f'''\
    # Start stops: {len(self._start_names)} {self._start_names}
    # Transfer stops: {len(self._transfer_names)} {self._transfer_names}
    # Finish stops: {len(self._finish_names)} {self._finish_names}'''
    #         return result

    # return 'Line names and number of stops:\n' + \
    #        '\n'.join(f'bus_id: {k}, stops: {v}' for k, v
    #                  in self._bus_lines_counts.items())

    # total = sum(self._errors.values())
    # return f'Type and required field validation: {total} errors\n' + \
    #        '\n'.join(f'{k}: {v}' for k, v, in self._errors.items())
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/10893#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: "Mon, 16 Jan 2023 15:55:20 UTC"
record: -1
